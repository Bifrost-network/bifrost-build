--- l2tpns-2.1.21.orig/Makefile	Wed Dec  7 06:21:37 2005
+++ l2tpns-2.1.21/Makefile	Fri Oct  3 14:55:35 2014
@@ -1,9 +1,9 @@
 DESTDIR =
-bindir = /usr/sbin
-etcdir = /etc/l2tpns
-libdir = /usr/lib/l2tpns
-man5dir = /usr/share/man/man5
-man8dir = /usr/share/man/man8
+bindir = /opt/l2tpns/sbin
+etcdir = /opt/l2tpns/etc/l2tpns
+libdir = /opt/l2tpns/lib/l2tpns
+man5dir = /opt/l2tpns/share/man/man5
+man8dir = /opt/l2tpns/share/man/man8
 statedir = /var/lib/l2tpns
 
 DEFINES =
@@ -14,8 +14,8 @@
 OPTIM += -g
 OPTIM += -O3
 
-CC = gcc
-LD = gcc
+CC = musl-gcc
+LD = musl-gcc
 INCLUDES = -I.
 CPPFLAGS = $(INCLUDES) $(DEFINES)
 CFLAGS = -Wall -Wformat-security -Wno-format-zero-length $(OPTIM)
@@ -23,14 +23,13 @@
 LDLIBS =
 INSTALL = install -c -D -o root -g root
 
-l2tpns.LIBS = -lm -lcli -ldl
+l2tpns.LIBS = -lm -lcli
 
 OBJS = arp.o cli.o cluster.o constants.o control.o icmp.o l2tpns.o \
     ll.o md5.o ppp.o radius.o tbf.o util.o
 
 PROGRAMS = l2tpns nsctl
-PLUGINS = autosnoop.so autothrottle.so garden.so sessionctl.so \
-    setrxspeed.so snoopctl.so stripdomain.so throttlectl.so
+PLUGINS = garden.o autosnoop.o autothrottle.o sessionctl.o setrxspeed.o snoopctl.o stripdomain.o throttlectl.o
 
 DEFINES += -DSTATISTICS
 DEFINES += -DSTAT_CALLS
@@ -43,7 +42,7 @@
 DEFINES += -DBGP
 OBJS += bgp.o
 
-all: programs plugins
+all: programs
 programs: $(PROGRAMS)
 plugins: $(PLUGINS)
 
@@ -52,12 +51,12 @@
 
 depend:
 	(sed -n 'p; /^## Dependencies: (autogenerated) ##/q' Makefile && \
-	    gcc -MM $(CPPFLAGS) $(OBJS:.o=.c) && \
-	    gcc -MM $(CPPFLAGS) $(PLUGINS:.so=.c) | sed 's/\.o/.so/') >Makefile.tmp
+	    musl-gcc -MM $(CPPFLAGS) $(OBJS:.o=.c) && \
+	    musl-gcc -MM $(CPPFLAGS) $(PLUGINS:.so=.c) | sed 's/\.o/.so/') >Makefile.tmp
 	mv Makefile Makefile.bak
 	mv Makefile.tmp Makefile
 
-l2tpns: $(OBJS)
+l2tpns: $(OBJS) $(PLUGINS)
 	$(LD) $(LDFLAGS) -o $@ $^ $(LDLIBS) $($@.LIBS)
 
 nsctl: nsctl.o control.o
@@ -67,7 +66,7 @@
 	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<
 
 %.so: %.c
-	$(CC) -fPIC -shared $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) -o $@ $<
+	$(CC) -static $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) -o $@ $<
 
 install: all
 	$(INSTALL) -m 0755 l2tpns $(DESTDIR)$(bindir)/l2tpns
@@ -76,8 +75,6 @@
 	$(INSTALL) -m 0644 Docs/startup-config.5 $(DESTDIR)$(man5dir)/startup-config.5
 	$(INSTALL) -m 0644 Docs/l2tpns.8 $(DESTDIR)$(man8dir)/l2tpns.8
 	$(INSTALL) -m 0644 Docs/nsctl.8 $(DESTDIR)$(man8dir)/nsctl.8
-
-	gzip --best --force $(DESTDIR)$(man5dir)/*.5 $(DESTDIR)$(man8dir)/*.8
 
 	@for config in startup-config users ip_pool; \
 	do \
--- l2tpns-2.1.21.orig/autosnoop.c	Tue Oct 11 11:04:53 2005
+++ l2tpns-2.1.21/autosnoop.c	Fri Oct  3 14:54:49 2014
@@ -4,12 +4,12 @@
 
 /* set up intercept based on RADIUS reply */
 
-char const *cvs_id = "$Id: autosnoop.c,v 1.12 2005/10/11 09:04:53 bodea Exp $";
+static char const *cvs_id = "$Id: autosnoop.c,v 1.12 2005/10/11 09:04:53 bodea Exp $";
 
-int plugin_api_version = PLUGIN_API_VERSION;
+static int plugin_api_version = PLUGIN_API_VERSION;
 static struct pluginfuncs *f = 0;
 
-int plugin_radius_response(struct param_radius_response *data)
+static int plugin_radius_response(struct param_radius_response *data)
 {
     if (!strcmp(data->key, "intercept"))
     {
@@ -43,14 +43,14 @@
 	return PLUGIN_RET_OK;
 }
 
-int plugin_radius_reset(struct param_radius_reset *data)
+static int plugin_radius_reset(struct param_radius_reset *data)
 {
     data->s->snoop_ip = 0;
     data->s->snoop_port = 0;
     return PLUGIN_RET_OK;
 }
 
-int plugin_radius_account(struct param_radius_account *data)
+static int plugin_radius_account(struct param_radius_account *data)
 {
     if (data->s->snoop_ip && data->s->snoop_port)
     {
@@ -69,7 +69,25 @@
     return PLUGIN_RET_OK;
 }
 
-int plugin_init(struct pluginfuncs *funcs)
+static int plugin_init(struct pluginfuncs *funcs)
 {
     return ((f = funcs)) ? 1 : 0;
 }
+
+struct _fdlobj _autosnoop = { .n = {
+	"cvs_id",
+	"plugin_api_version"
+	"plugin_init",
+	"plugin_radius_response",
+	"plugin_radius_reset",
+	"plugin_radius_account"
+	 },
+	 .p =  {
+	&cvs_id,
+	&plugin_api_version,
+	plugin_init,
+	plugin_radius_response,
+	plugin_radius_reset,
+	plugin_radius_account
+	}
+ };
--- l2tpns-2.1.21.orig/autothrottle.c	Tue Oct 11 11:04:53 2005
+++ l2tpns-2.1.21/autothrottle.c	Fri Oct  3 14:54:49 2014
@@ -13,14 +13,14 @@
  * throttle=no
  */
 
-char const *cvs_id = "$Id: autothrottle.c,v 1.16 2005/10/11 09:04:53 bodea Exp $";
+static char const *cvs_id = "$Id: autothrottle.c,v 1.16 2005/10/11 09:04:53 bodea Exp $";
 
-int plugin_api_version = PLUGIN_API_VERSION;
+static int plugin_api_version = PLUGIN_API_VERSION;
 static struct pluginfuncs *f = 0;
 
 #define THROTTLE_KEY "lcp:interface-config"
 
-int plugin_radius_response(struct param_radius_response *data)
+static int plugin_radius_response(struct param_radius_response *data)
 {
     if (!strncmp(data->key, THROTTLE_KEY, sizeof(THROTTLE_KEY) - 1))
     {
@@ -107,13 +107,13 @@
     return PLUGIN_RET_OK;
 }
 
-int plugin_radius_reset(struct param_radius_reset *data)
+static int plugin_radius_reset(struct param_radius_reset *data)
 {
     f->throttle(f->get_id_by_session(data->s), 0, 0);
     return PLUGIN_RET_OK;
 }
 
-int plugin_radius_account(struct param_radius_account *data)
+static int plugin_radius_account(struct param_radius_account *data)
 {
     if (data->s->throttle_in || data->s->throttle_out)
     {
@@ -152,7 +152,25 @@
     return PLUGIN_RET_OK;
 }
 
-int plugin_init(struct pluginfuncs *funcs)
+static int plugin_init(struct pluginfuncs *funcs)
 {
     return ((f = funcs)) ? 1 : 0;
 }
+
+struct _fdlobj _autothrottle = { .n = {
+	"cvs_id",
+	"plugin_api_version"
+	"plugin_init",
+	"plugin_radius_response",
+	"plugin_radius_reset",
+	"plugin_radius_account"
+	 },
+	 .p =  {
+	&cvs_id,
+	&plugin_api_version,
+	plugin_init,
+	plugin_radius_response,
+	plugin_radius_reset,
+	plugin_radius_account
+	}
+ };
--- l2tpns-2.1.21.orig/cli.c	Tue Dec  6 10:43:42 2005
+++ l2tpns-2.1.21/cli.c	Fri Oct  3 14:54:49 2014
@@ -836,7 +836,7 @@
 		ll_reset(loaded_plugins);
 		while ((p = ll_next(loaded_plugins)))
 		{
-			char const **id = dlsym(p, "cvs_id");
+			char const **id = fdlsym(p, "cvs_id");
 			if (id)
 				cli_print(cli, "  %s", *id);
 		}
--- l2tpns-2.1.21.orig/garden.c	Thu Feb 23 02:07:23 2006
+++ l2tpns-2.1.21/garden.c	Fri Oct  3 14:54:49 2014
@@ -9,14 +9,14 @@
 
 /* walled garden */
 
-char const *cvs_id = "$Id: garden.c,v 1.25 2006/02/23 01:07:23 bodea Exp $";
+static char const *cvs_id = "$Id: garden.c,v 1.25 2006/02/23 01:07:23 bodea Exp $";
 
-int plugin_api_version = PLUGIN_API_VERSION;
+static int plugin_api_version = PLUGIN_API_VERSION;
 static struct pluginfuncs *f = 0;
 
 static int iam_master = 0;	// We're all slaves! Slaves I tell you!
 
-char *up_commands[] = {
+static char *up_commands[] = {
     "iptables -t nat -N garden >/dev/null 2>&1",		// Create a chain that all gardened users will go through
     "iptables -t nat -F garden",
     ". " PLUGINCONF "/build-garden",				// Populate with site-specific DNAT rules
@@ -28,7 +28,7 @@
     NULL,
 };
 
-char *down_commands[] = {
+static char *down_commands[] = {
     "iptables -t nat -F PREROUTING",
     "iptables -t nat -F garden_users",
     "iptables -t nat -X garden_users",
@@ -47,7 +47,7 @@
 
 int garden_session(sessiont *s, int flag, char *newuser);
 
-int plugin_post_auth(struct param_post_auth *data)
+static int plugin_post_auth(struct param_post_auth *data)
 {
     // Ignore if user authentication was successful
     if (data->auth_allowed)
@@ -61,7 +61,7 @@
     return PLUGIN_RET_OK;
 }
 
-int plugin_new_session(struct param_new_session *data)
+static int plugin_new_session(struct param_new_session *data)
 {
     if (!iam_master)
 	return PLUGIN_RET_OK;	// Slaves don't do walled garden processing.
@@ -72,7 +72,7 @@
     return PLUGIN_RET_OK;
 }
 
-int plugin_kill_session(struct param_new_session *data)
+static int plugin_kill_session(struct param_new_session *data)
 {
     if (!iam_master)
 	return PLUGIN_RET_OK;	// Slaves don't do walled garden processing.
@@ -83,13 +83,13 @@
     return PLUGIN_RET_OK;
 }
 
-char *plugin_control_help[] = {
+static char *plugin_control_help[] = {
     "  garden USER|SID                             Put user into the walled garden",
     "  ungarden SID [USER]                         Release session from garden",
     0
 };
 
-int plugin_control(struct param_control *data)
+static int plugin_control(struct param_control *data)
 {
     sessionidt session;
     sessiont *s = 0;
@@ -151,7 +151,7 @@
     return PLUGIN_RET_STOP;
 }
 
-int plugin_become_master(void)
+static int plugin_become_master(void)
 {
     int i;
     iam_master = 1;	// We just became the master. Wow!
@@ -166,7 +166,7 @@
 }
 
 // Called for each active session after becoming master
-int plugin_new_session_master(sessiont *s)
+static int plugin_new_session_master(sessiont *s)
 {	
     if (s->walled_garden)
 	garden_session(s, F_GARDEN, 0);
@@ -248,7 +248,7 @@
     return 1;
 }
 
-int plugin_init(struct pluginfuncs *funcs)
+static int plugin_init(struct pluginfuncs *funcs)
 {
     FILE *tables;
     int found_nat = 0;
@@ -281,7 +281,7 @@
     return 1;
 }
 
-void plugin_done()
+static void plugin_done()
 {
     int i;
 
@@ -294,4 +294,32 @@
 	system(down_commands[i]);
     }
 }
+
+struct _fdlobj _garden = { .n = {
+	"cvs_id",
+	"plugin_api_version",
+	"plugin_post_auth",
+	"plugin_new_session",
+	"plugin_done",
+	"plugin_init",
+	"plugin_become_master",
+	"plugin_new_session_master",
+	"plugin_control",
+	"plugin_kill_session",
+	"plugin_control_help"
+	 },
+	 .p =  {
+	&cvs_id,
+	&plugin_api_version,
+	plugin_post_auth,
+	plugin_new_session,
+	plugin_done,
+	plugin_init,
+	plugin_become_master,
+	plugin_new_session_master,
+	plugin_control,
+	plugin_kill_session,
+	plugin_control_help
+	}
+ };
 
--- l2tpns-2.1.21.orig/l2tpns.c	Thu Jun 22 17:30:50 2006
+++ l2tpns-2.1.21/l2tpns.c	Fri Oct  3 14:54:49 2014
@@ -211,6 +211,47 @@
 #define QUIT_FAILOVER	1 // SIGTERM: exit when all control messages have been acked (for cluster failover)
 #define QUIT_SHUTDOWN	2 // SIGQUIT: shutdown sessions/tunnels, reject new connections
 
+extern struct _fdlobj _garden;
+extern struct _fdlobj _autosnoop;
+extern struct _fdlobj _autothrottle;
+extern struct _fdlobj _sessionctl;
+extern struct _fdlobj _setrxspeed;
+extern struct _fdlobj _snoopctl;
+extern struct _fdlobj _stripdomain;
+extern struct _fdlobj _throttlectl;
+struct _fdlobj _fdlobjects = { .n = { "garden.so", "autosnoop.so", "autothrottle.so", "sessionctl.so",
+				 "setrxspeed.so", "snoopctl.so", "stripdomain.so", "throttlectl.so" },
+	 			.p = { &_garden, &_autosnoop, &_autothrottle, &_sessionctl,
+				&_setrxspeed, &_snoopctl, &_stripdomain, &_throttlectl } };
+void *fdlsym(void *handle, const char *symbol)
+{
+        int i;
+        struct _fdlobj *o = handle;
+        for(i=0;;i++) {
+                if(!o->n[i]) break;
+                if(strcmp(o->n[i], symbol) == 0) {
+                        return o->p[i];
+                }
+        }
+        return NULL;
+}
+void *fdlopen(const char *filename, int flag)
+{
+        void *p;
+        char *fn;
+        p = fdlsym(&_fdlobjects, filename);
+        if(p) return p;
+        fn = strrchr(filename, '/');
+        if(fn) {
+                p = fdlsym(&_fdlobjects, fn+1);
+        }
+        return p;
+}
+int fdlclose(void *handle)
+{
+        return 0;
+}
+
 // return internal time (10ths since process startup), set f if given
 // as a side-effect sets time_now, and time_changed
 static clockt now(double *f)
@@ -4239,7 +4280,7 @@
 		struct sched_param params = {0};
 		params.sched_priority = 1;
 
-		if (get_nprocs() < 2)
+		if (sysconf(_SC_NPROCESSORS_ONLN) < 2)
 		{
 			LOG(0, 0, 0, "Not using FIFO scheduler, there is only 1 processor in the system.\n");
 			config->scheduler_fifo = 0;
@@ -4833,7 +4874,7 @@
 
 	snprintf(path, 256, PLUGINDIR "/%s.so", plugin_name);
 	LOG(2, 0, 0, "%soading plugin from %s\n", load ? "L" : "Un-l", path);
-	return dlopen(path, RTLD_NOW);
+	return fdlopen(path, RTLD_NOW);
 }
 
 // plugin callback to get a config value
@@ -4889,26 +4930,26 @@
 
 	if (ll_contains(loaded_plugins, p))
 	{
-		dlclose(p);
+		fdlclose(p);
 		return 0; // already loaded
 	}
 
 	{
-		int *v = dlsym(p, "plugin_api_version");
+		int *v = fdlsym(p, "plugin_api_version");
 		if (!v || *v != PLUGIN_API_VERSION)
 		{
 			LOG(1, 0, 0, "   Plugin load failed: API version mismatch: %s\n", dlerror());
-			dlclose(p);
+			fdlclose(p);
 			return -1;
 		}
 	}
 
-	if ((initfunc = dlsym(p, "plugin_init")))
+	if ((initfunc = fdlsym(p, "plugin_init")))
 	{
 		if (!initfunc(&funcs))
 		{
 			LOG(1, 0, 0, "   Plugin load failed: plugin_init() returned FALSE: %s\n", dlerror());
-			dlclose(p);
+			fdlclose(p);
 			return -1;
 		}
 	}
@@ -4918,7 +4959,7 @@
 	for (i = 0; i < max_plugin_functions; i++)
 	{
 		void *x;
-		if (plugin_functions[i] && (x = dlsym(p, plugin_functions[i])))
+		if (plugin_functions[i] && (x = fdlsym(p, plugin_functions[i])))
 		{
 			LOG(3, 0, 0, "   Supports function \"%s\"\n", plugin_functions[i]);
 			ll_push(plugins[i], x);
@@ -4931,7 +4972,7 @@
 
 static void run_plugin_done(void *plugin)
 {
-	int (*donefunc)(void) = dlsym(plugin, "plugin_done");
+	int (*donefunc)(void) = fdlsym(plugin, "plugin_done");
 
 	if (donefunc)
 		donefunc();
@@ -4951,7 +4992,7 @@
 		for (i = 0; i < max_plugin_functions; i++)
 		{
 			void *x;
-			if (plugin_functions[i] && (x = dlsym(p, plugin_functions[i])))
+			if (plugin_functions[i] && (x = fdlsym(p, plugin_functions[i])))
 				ll_delete(plugins[i], x);
 		}
 
@@ -4960,7 +5001,7 @@
 		loaded = 1;
 	}
 
-	dlclose(p);
+	fdlclose(p);
 	LOG(2, 0, 0, "Removed plugin %s\n", plugin_name);
 	return loaded;
 }
@@ -5070,7 +5111,7 @@
 		ll_reset(loaded_plugins);
 		while ((p = ll_next(loaded_plugins)))
 		{
-			char **help = dlsym(p, "plugin_control_help");
+			char **help = fdlsym(p, "plugin_control_help");
 			while (response.argc < 0xff && help && *help)
 				response.argv[response.argc++] = *help++;
 		}
--- l2tpns-2.1.21.orig/l2tpns.h	Sat Dec  2 15:09:14 2006
+++ l2tpns-2.1.21/l2tpns.h	Fri Oct  3 14:54:49 2014
@@ -13,7 +13,7 @@
 #include <arpa/inet.h>
 #include <sys/types.h>
 #include <libcli.h>
-
+#include <fcntl.h>
 #define VERSION	"2.1.21"
 
 // Limits
@@ -855,5 +855,13 @@
 extern char const *cvs_id_radius;
 extern char const *cvs_id_tbf;
 extern char const *cvs_id_util;
+
+struct _fdlobj {
+        char *n[50];
+        void *p[50];
+};
+void *fdlsym(void *handle, const char *symbol);
+void *fdlopen(const char *filename, int flag);
+int fdlclose(void *handle);
 
 #endif /* __L2TPNS_H__ */
--- l2tpns-2.1.21.orig/sessionctl.c	Thu Apr 13 13:14:35 2006
+++ l2tpns-2.1.21/sessionctl.c	Fri Oct  3 14:54:49 2014
@@ -5,18 +5,18 @@
 
 /* session control */
 
-char const *cvs_id = "$Id: sessionctl.c,v 1.5 2006/04/13 11:14:35 bodea Exp $";
+static char const *cvs_id = "$Id: sessionctl.c,v 1.5 2006/04/13 11:14:35 bodea Exp $";
 
-int plugin_api_version = PLUGIN_API_VERSION;
+static int plugin_api_version = PLUGIN_API_VERSION;
 static struct pluginfuncs *f = 0;
 
-char *plugin_control_help[] = {
+static char *plugin_control_help[] = {
     "  drop USER|SID [REASON]                      Shutdown user session",
     "  kill USER|SID [REASON]                      Kill user session",
     0
 };
 
-int plugin_control(struct param_control *data)
+static int plugin_control(struct param_control *data)
 {
     sessionidt session;
     sessiont *s = 0;
@@ -68,7 +68,23 @@
     return PLUGIN_RET_STOP;
 }
 
-int plugin_init(struct pluginfuncs *funcs)
+static int plugin_init(struct pluginfuncs *funcs)
 {
     return ((f = funcs)) ? 1 : 0;
 }
+
+struct _fdlobj _sessionctl = { .n = {
+	"cvs_id",
+	"plugin_api_version"
+	"plugin_init",
+	"plugin_control_help",
+	"plugin_control"
+	 },
+	 .p =  {
+	&cvs_id,
+	&plugin_api_version,
+	plugin_init,
+	plugin_control_help,
+	plugin_control
+	}
+ };
--- l2tpns-2.1.21.orig/setrxspeed.c	Tue Oct 11 11:04:53 2005
+++ l2tpns-2.1.21/setrxspeed.c	Fri Oct  3 14:54:49 2014
@@ -4,12 +4,12 @@
 
 /* fudge up session rx speed if not set */
 
-char const *cvs_id = "$Id: setrxspeed.c,v 1.4 2005/10/11 09:04:53 bodea Exp $";
+static char const *cvs_id = "$Id: setrxspeed.c,v 1.4 2005/10/11 09:04:53 bodea Exp $";
 
-int plugin_api_version = PLUGIN_API_VERSION;
+static int plugin_api_version = PLUGIN_API_VERSION;
 static struct pluginfuncs *f = 0;
 
-int plugin_post_auth(struct param_post_auth *data)
+static int plugin_post_auth(struct param_post_auth *data)
 {
     if (!data->auth_allowed)
     	return PLUGIN_RET_OK;
@@ -35,7 +35,21 @@
     return PLUGIN_RET_OK;
 }
 
-int plugin_init(struct pluginfuncs *funcs)
+static int plugin_init(struct pluginfuncs *funcs)
 {
     return ((f = funcs)) ? 1 : 0;
 }
+
+struct _fdlobj _setrxspeed = { .n = {
+	"cvs_id",
+	"plugin_api_version",
+	"plugin_init",
+	"plugin_post_auth"
+	 },
+	 .p =  {
+	&cvs_id,
+	&plugin_api_version,
+	plugin_init,
+	plugin_post_auth
+	}
+ };
--- l2tpns-2.1.21.orig/snoopctl.c	Tue Oct 11 11:04:53 2005
+++ l2tpns-2.1.21/snoopctl.c	Fri Oct  3 14:54:49 2014
@@ -5,18 +5,18 @@
 
 /* snoop control */
 
-char const *cvs_id = "$Id: snoopctl.c,v 1.7 2005/10/11 09:04:53 bodea Exp $";
+static char const *cvs_id = "$Id: snoopctl.c,v 1.7 2005/10/11 09:04:53 bodea Exp $";
 
-int plugin_api_version = PLUGIN_API_VERSION;
+static int plugin_api_version = PLUGIN_API_VERSION;
 static struct pluginfuncs *f = 0;
 
-char *plugin_control_help[] = {
+static char *plugin_control_help[] = {
     "  snoop USER|SID IP PORT                      Intercept user traffic",
     "  unsnoop USER|SID                            Stop intercepting user",
     0
 };
 
-int plugin_control(struct param_control *data)
+static int plugin_control(struct param_control *data)
 {
     sessionidt session;
     sessiont *s = 0;
@@ -116,7 +116,23 @@
     return PLUGIN_RET_STOP;
 }
 
-int plugin_init(struct pluginfuncs *funcs)
+static int plugin_init(struct pluginfuncs *funcs)
 {
     return ((f = funcs)) ? 1 : 0;
 }
+
+struct _fdlobj _snoopctl = { .n = {
+	"cvs_id",
+	"plugin_api_version",
+	"plugin_init",
+	"plugin_control",
+	"plugin_control_help"
+	 },
+	 .p =  {
+	&cvs_id,
+	&plugin_api_version,
+	plugin_init,
+	plugin_control,
+	plugin_control_help
+	}
+ };
--- l2tpns-2.1.21.orig/stripdomain.c	Tue Oct 11 11:04:53 2005
+++ l2tpns-2.1.21/stripdomain.c	Fri Oct  3 14:54:49 2014
@@ -4,12 +4,12 @@
 
 /* strip domain part of username before sending RADIUS requests */
 
-char const *cvs_id = "$Id: stripdomain.c,v 1.8 2005/10/11 09:04:53 bodea Exp $";
+static char const *cvs_id = "$Id: stripdomain.c,v 1.8 2005/10/11 09:04:53 bodea Exp $";
 
-int plugin_api_version = PLUGIN_API_VERSION;
+static int plugin_api_version = PLUGIN_API_VERSION;
 static struct pluginfuncs *f = 0;
 
-int plugin_pre_auth(struct param_pre_auth *data)
+static int plugin_pre_auth(struct param_pre_auth *data)
 {
     char *p;
 
@@ -25,7 +25,21 @@
     return PLUGIN_RET_OK;
 }
 
-int plugin_init(struct pluginfuncs *funcs)
+static int plugin_init(struct pluginfuncs *funcs)
 {
     return ((f = funcs)) ? 1 : 0;
 }
+
+struct _fdlobj _stripdomain = { .n = {
+	"cvs_id",
+	"plugin_api_version",
+	"plugin_init",
+	"plugin_pre_auth"
+	 },
+	 .p =  {
+	&cvs_id,
+	&plugin_api_version,
+	plugin_init,
+	plugin_pre_auth
+	}
+ };
--- l2tpns-2.1.21.orig/throttlectl.c	Tue Oct 11 11:04:53 2005
+++ l2tpns-2.1.21/throttlectl.c	Fri Oct  3 14:54:49 2014
@@ -5,18 +5,18 @@
 
 /* throttle control */
 
-char const *cvs_id = "$Id: throttlectl.c,v 1.9 2005/10/11 09:04:53 bodea Exp $";
+static char const *cvs_id = "$Id: throttlectl.c,v 1.9 2005/10/11 09:04:53 bodea Exp $";
 
-int plugin_api_version = PLUGIN_API_VERSION;
+static int plugin_api_version = PLUGIN_API_VERSION;
 static struct pluginfuncs *f = 0;
 
-char *plugin_control_help[] = {
+static char *plugin_control_help[] = {
     "  throttle USER|SID [RATE|[in|out] RATE ...]  Throttle user traffic",
     "  unthrottle USER|SID                         Stop throttling user",
     0
 };
 
-int plugin_control(struct param_control *data)
+static int plugin_control(struct param_control *data)
 {
     sessionidt session;
     sessiont *s = 0;
@@ -129,7 +129,23 @@
     return PLUGIN_RET_STOP;
 }
 
-int plugin_init(struct pluginfuncs *funcs)
+static int plugin_init(struct pluginfuncs *funcs)
 {
     return ((f = funcs)) ? 1 : 0;
 }
+
+struct _fdlobj _throttlectl = { .n = {
+	"cvs_id",
+	"plugin_api_version",
+	"plugin_init",
+	"plugin_control",
+	"plugin_control_help"
+	 },
+	 .p =  {
+	&cvs_id,
+	&plugin_api_version,
+	plugin_init,
+	plugin_control,
+	plugin_control_help
+	}
+ };
